#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <elf.h>
#include <stdlib.h>

#define BUFFER_SIZE 64

void display_elf_header_info(Elf64_Ehdr *elf_header);


/**
 * main - Display information from the ELF header of an ELF file.
 *
 * Usage: elf_header elf_filename
 * Displayed information: Magic, Class, Data, Version, OS/ABI, ABI Version,
 * Type, Entry point address.
 * Format: the same as readelf -h (version 2.26.1)
 * If the file is not an ELF file, or on error, exit with status code 98 and
 * display a comprehensive error message to stderr
 * You are allowed to use lseek once
 * You are allowed to use read a maximum of 2 times at runtime
 * You are allowed to have as many functions as you want in your source file
 * You are allowed to use printf
 *
 * @argc: Number of command-line arguments
 * @argv: Array of command-line argument strings
 * Return: 0 on successful execution, 98 on failure
 */
int main(int argc, char *argv[])
{
	int fd;

	if (argc != 2)
	{
		fprintf(stderr, "Usage: %s elf_filename\n", argv[0]);
		return (98);
	}

	fd = open(argv[1], O_RDONLY);
	if (fd == -1)
	{
		perror("Error opening file");
		return (98);
	}

	/* Read the ELF header */
	Elf64_Ehdr elf_header;

	if (read(fd, &elf_header, sizeof(Elf64_Ehdr)) != sizeof(Elf64_Ehdr))
	{
		perror("Error reading ELF header");
		close(fd);
		return (98);
	}

	/* Verify the ELF magic number */
	if (elf_header.e_ident[EI_MAG0] != ELFMAG0 ||
	    elf_header.e_ident[EI_MAG1] != ELFMAG1 ||
	    elf_header.e_ident[EI_MAG2] != ELFMAG2 ||
	    elf_header.e_ident[EI_MAG3] != ELFMAG3) {
		fprintf(stderr, "Error: Not an ELF file\n");
		close(fd);
		return (98);
	}

	/* Display ELF header information */
	display_elf_header_info(&elf_header);

	close(fd);
	return (0);
}

/**
 * @brief Display information from the ELF header.
 *
 * @param elf_header Pointer to the ELF header structure
 */
void display_elf_header_info(Elf64_Ehdr *elf_header)
{
	int i;

	printf("ELF Header:\n");
	printf("  Magic:   ");
	for (i = 0; i < EI_NIDENT; i++)
	{
		printf(" %02x", elf_header->e_ident[i]);
	}
	printf("\n");
	printf("  Class:                             %s\n",
	       elf_header->e_ident[EI_CLASS] == ELFCLASS64 ? "ELF64" : "ELF32");
	printf("  Data:                              %s\n",
	       elf_header->e_ident[EI_DATA] == ELFDATA2LSB ?
	       "2's complement, little endian" : "2's complement, big endian");
	printf("  Version:                           %d (current)\n",
	       elf_header->e_ident[EI_VERSION]);
	printf("  OS/ABI:                            %d\n",
	       elf_header->e_ident[EI_OSABI]);
	printf("  ABI Version:                       %d\n",
	       elf_header->e_ident[EI_ABIVERSION]);
	printf("  Type:                              %s\n",
	       elf_header->e_type == ET_EXEC ? "EXEC (Executable file)" :
	       elf_header->e_type == ET_REL ? "REL (Relocatable file)" :
	       elf_header->e_type == ET_DYN ? "DYN (Shared object file)" :
	       "Unknown");
	printf("  Entry point address:               %lx\n",
	       (unsigned long)elf_header->e_entry);
}
